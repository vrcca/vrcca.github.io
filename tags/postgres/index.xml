<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Postgres on Atomic Reference</title>
    <link>https://blog.vitor.info/tags/postgres/</link>
    <description>Recent content in Postgres on Atomic Reference</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Oct 2018 15:21:02 +0000</lastBuildDate>
    
	<atom:link href="https://blog.vitor.info/tags/postgres/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hello World!</title>
      <link>https://blog.vitor.info/post/row-level-security-with-postgres-in-elixir-part-1/</link>
      <pubDate>Thu, 18 Oct 2018 15:21:02 +0000</pubDate>
      
      <guid>https://blog.vitor.info/post/row-level-security-with-postgres-in-elixir-part-1/</guid>
      <description>This is a dump from my recent experience implementing Row-level security in Elixir and Postgres for dynamically defined tenants.
Whatâ€™s row-level security? We need Row-level security (or just RLS) when we want certain users of the app to only see certain rows of the database. A good example is a user that, once logged in a banking app, can only see their transactions instead of the other users.
How? The Ecto way There are a few ways of doing that like checking for a user_id (a.</description>
    </item>
    
  </channel>
</rss>